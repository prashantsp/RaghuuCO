# RAGHUU CO Legal Practice Management System - CI/CD Pipeline
# 
# @author RAGHUU CO Development Team
# @version 1.0.0
# @since 2025-01-15
# 
# @description GitHub Actions workflow for continuous integration and deployment
# including testing, building, and deployment to staging/production environments

name: RAGHUU CO CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'
  REDIS_VERSION: '7'

jobs:
  # Linting and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run ESLint
      run: |
        npm run lint
        cd backend && npm run lint
        cd ../frontend && npm run lint
        
    - name: Run Prettier check
      run: |
        npm run format:check
        cd backend && npm run format:check
        cd ../frontend && npm run format:check
        
    - name: Check JSDoc compliance
      run: npm run check:jsdoc
      
    - name: Check SQL centralization
      run: npm run check:sql
      
    - name: Check access control
      run: npm run check:access

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raghuuco_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/raghuuco_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        
    - name: Run backend integration tests
      run: cd backend && npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/raghuuco_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage --watchAll=false
      
    - name: Run frontend E2E tests
      run: cd frontend && npm run test:e2e
      
    - name: Upload frontend test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: monitor
        
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, backend-test, frontend-test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build backend
      run: cd backend && npm run build
      env:
        NODE_ENV: production
        
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        NODE_ENV: production
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        
    - name: Build Docker images
      run: |
        docker build -t raghuuco-backend:latest ./backend
        docker build -t raghuuco-frontend:latest ./frontend
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/dist/
          backend/Dockerfile
          frontend/Dockerfile

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: raghuuco
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG ./backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG
        
    - name: Deploy to staging
      run: |
        aws eks update-kubeconfig --name raghuuco-staging --region ${{ secrets.AWS_REGION }}
        kubectl set image deployment/raghuuco-backend backend=$ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG
        kubectl set image deployment/raghuuco-frontend frontend=$ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG
        kubectl rollout status deployment/raghuuco-backend
        kubectl rollout status deployment/raghuuco-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: raghuuco
        IMAGE_TAG: staging-${{ github.sha }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: raghuuco
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG ./backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG
        
    - name: Create backup
      run: |
        aws eks update-kubeconfig --name raghuuco-production --region ${{ secrets.AWS_REGION }}
        kubectl exec deployment/postgres -- pg_dump -U raghuuco_user raghuuco_prod > backup_$(date +%Y%m%d_%H%M%S).sql
        
    - name: Deploy to production (Blue-Green)
      run: |
        # Deploy to blue environment first
        kubectl set image deployment/raghuuco-backend-blue backend=$ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG
        kubectl set image deployment/raghuuco-frontend-blue frontend=$ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG
        kubectl rollout status deployment/raghuuco-backend-blue
        kubectl rollout status deployment/raghuuco-frontend-blue
        
        # Run health checks
        ./scripts/health-check.sh blue
        
        # Switch traffic to blue
        kubectl patch service raghuuco-service -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # Deploy to green environment
        kubectl set image deployment/raghuuco-backend-green backend=$ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG
        kubectl set image deployment/raghuuco-frontend-green frontend=$ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG
        kubectl rollout status deployment/raghuuco-backend-green
        kubectl rollout status deployment/raghuuco-frontend-green
        
        # Run health checks
        ./scripts/health-check.sh green
        
        # Switch traffic to green
        kubectl patch service raghuuco-service -p '{"spec":{"selector":{"version":"green"}}}'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: raghuuco
        IMAGE_TAG: v${{ github.run_number }}
        
    - name: Run post-deployment tests
      run: |
        npm run test:smoke
        npm run test:performance
        
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run load tests
      run: npm run test:load
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
        
    - name: Run stress tests
      run: npm run test:stress
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
        
    - name: Generate performance report
      run: npm run test:performance:report
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/