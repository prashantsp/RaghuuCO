# System Design & Architecture Document
## RAGHUU CO Legal Practice Management System

### Document Version: 1.0
### Date: August 22, 2025
### Technology Stack: Node.js/React/PostgreSQL

---

## Architecture Overview

The RAGHUU CO Legal Practice Management System follows a modern three-tier architecture built on the PERN stack (PostgreSQL, Express.js, React, Node.js) with a microservices-oriented approach for scalability and maintainability.

### Architecture Principles
1. **Separation of Concerns**: Clear separation between presentation, business logic, and data layers
2. **Scalability**: Horizontal scaling capabilities with containerized deployment
3. **Security-First**: End-to-end encryption and role-based access control
4. **API-First**: RESTful APIs for all operations with potential GraphQL implementation
5. **Mobile-Responsive**: Progressive Web App (PWA) capabilities
6. **Compliance-Ready**: Built-in audit trails and Indian legal compliance features

## High-Level System Architecture

```
â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”
â”‚                    Client Layer (React PWA)                     â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚                     API Gateway (Express.js)                    â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚  Application Services Layer (Node.js Microservices)            â”‚
â”‚  â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â” â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â” â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”             â”‚
â”‚  â”‚   Auth       â”‚ â”‚  Case Mgmt   â”‚ â”‚  Document    â”‚             â”‚
â”‚  â”‚   Service    â”‚ â”‚   Service    â”‚ â”‚   Service    â”‚             â”‚
â”‚  â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜             â”‚
â”‚  â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â” â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â” â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”             â”‚
â”‚  â”‚   Billing    â”‚ â”‚   Calendar   â”‚ â”‚  Notificationâ”‚             â”‚
â”‚  â”‚   Service    â”‚ â”‚   Service    â”‚ â”‚   Service    â”‚             â”‚
â”‚  â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜             â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚                    Data Access Layer (Prisma ORM)               â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚                   Database Layer (PostgreSQL)                   â”‚
â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”˜
```

## Technology Stack Selection

### Frontend Stack
**React 18 with TypeScript**
- **Why React**: Component reusability, large ecosystem, excellent development tools
- **Why TypeScript**: Type safety, better IDE support, reduced runtime errors
- **State Management**: Redux Toolkit for complex state, React Query for server state
- **UI Framework**: Material-UI (MUI) for consistent design system
- **Routing**: React Router v6 for client-side routing
- **Forms**: React Hook Form with Yup validation
- **PWA**: Service workers for offline capabilities

### Backend Stack
**Node.js with Express.js and TypeScript**
- **Why Node.js**: JavaScript ecosystem consistency, excellent I/O performance
- **Why Express.js**: Mature framework, extensive middleware ecosystem
- **API Architecture**: RESTful APIs with OpenAPI 3.0 documentation
- **ORM**: Prisma for type-safe database operations
- **Authentication**: JWT with refresh tokens, bcrypt for password hashing
- **File Upload**: Multer with AWS S3 or local storage options
- **Task Queue**: Bull Queue with Redis for background processing

### Database Design
**PostgreSQL 14+ with JSON support**
- **Why PostgreSQL**: ACID compliance, JSON support, excellent performance
- **Connection Pooling**: PgBouncer for connection management
- **Backup Strategy**: Daily automated backups with point-in-time recovery
- **Indexing Strategy**: B-tree indexes for queries, GIN indexes for JSON fields

### Infrastructure & DevOps
- **Containerization**: Docker and Docker Compose
- **Deployment**: AWS/Azure with container orchestration
- **Load Balancing**: Nginx reverse proxy
- **SSL/TLS**: Let's Encrypt certificates with auto-renewal
- **Monitoring**: Prometheus + Grafana for metrics, Winston for logging
- **CI/CD**: GitHub Actions with automated testing and deployment

## Database Design

### Core Entity Relationships

```sql
-- Users table with role-based access
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    role user_role NOT NULL,
    phone VARCHAR(20),
    is_active BOOLEAN DEFAULT true,
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Clients with comprehensive contact information
CREATE TABLE clients (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    client_type client_type_enum NOT NULL, -- individual, company
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    company_name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(20),
    address JSONB, -- Flexible address structure
    pan_number VARCHAR(10),
    gstin VARCHAR(15),
    emergency_contact JSONB,
    referral_source VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Cases/Matters management
CREATE TABLE cases (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    case_number VARCHAR(50) UNIQUE NOT NULL,
    title VARCHAR(255) NOT NULL,
    case_type case_type_enum NOT NULL, -- constitutional, real_estate, banking, company
    status case_status_enum DEFAULT 'active', -- active, pending, completed, on_hold
    priority priority_enum DEFAULT 'medium', -- low, medium, high, urgent
    description TEXT,
    client_id UUID NOT NULL REFERENCES clients(id),
    assigned_partner UUID REFERENCES users(id),
    assigned_associates UUID[] DEFAULT '{}',
    court_details JSONB,
    opposing_party JSONB,
    case_value DECIMAL(15,2),
    retainer_amount DECIMAL(15,2),
    billing_arrangement billing_type_enum, -- hourly, fixed, contingency
    start_date DATE NOT NULL,
    expected_completion_date DATE,
    actual_completion_date DATE,
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Document management with version control
CREATE TABLE documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    case_id UUID NOT NULL REFERENCES cases(id),
    filename VARCHAR(255) NOT NULL,
    original_filename VARCHAR(255) NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER NOT NULL,
    mime_type VARCHAR(100) NOT NULL,
    document_type document_type_enum, -- pleading, contract, evidence, correspondence
    version INTEGER DEFAULT 1,
    parent_document_id UUID REFERENCES documents(id),
    tags TEXT[],
    description TEXT,
    is_confidential BOOLEAN DEFAULT false,
    uploaded_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Time tracking for billing
CREATE TABLE time_entries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    case_id UUID NOT NULL REFERENCES cases(id),
    user_id UUID NOT NULL REFERENCES users(id),
    task_description TEXT NOT NULL,
    hours_worked DECIMAL(4,2) NOT NULL,
    billing_rate DECIMAL(8,2),
    is_billable BOOLEAN DEFAULT true,
    date_worked DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Calendar and scheduling
CREATE TABLE calendar_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    event_type event_type_enum, -- court_hearing, client_meeting, deadline, reminder
    case_id UUID REFERENCES cases(id),
    start_datetime TIMESTAMP NOT NULL,
    end_datetime TIMESTAMP NOT NULL,
    location VARCHAR(255),
    attendees UUID[] DEFAULT '{}',
    is_all_day BOOLEAN DEFAULT false,
    reminder_intervals INTEGER[] DEFAULT '{1440, 60}', -- minutes before event
    google_calendar_id VARCHAR(255),
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Key Database Features
1. **UUID Primary Keys**: For better security and distributed system compatibility
2. **JSONB Fields**: For flexible schema design (addresses, court details, metadata)
3. **Array Fields**: For multi-value relationships (assigned associates, tags, attendees)
4. **Enum Types**: For controlled vocabulary and data integrity
5. **Audit Trails**: Comprehensive created_at/updated_at timestamps with user tracking
6. **Soft Deletes**: is_active flags instead of hard deletes for compliance

## API Design

### RESTful API Structure

```
/api/v1/
â”œâ”€â”€ /auth
â”‚   â”œâ”€â”€ POST /login
â”‚   â”œâ”€â”€ POST /logout
â”‚   â”œâ”€â”€ POST /refresh-token
â”‚   â””â”€â”€ POST /forgot-password
â”œâ”€â”€ /users
â”‚   â”œâ”€â”€ GET /users (with pagination, filtering)
â”‚   â”œâ”€â”€ POST /users
â”‚   â”œâ”€â”€ GET /users/:id
â”‚   â”œâ”€â”€ PUT /users/:id
â”‚   â””â”€â”€ DELETE /users/:id
â”œâ”€â”€ /clients
â”‚   â”œâ”€â”€ GET /clients
â”‚   â”œâ”€â”€ POST /clients
â”‚   â”œâ”€â”€ GET /clients/:id
â”‚   â””â”€â”€ PUT /clients/:id
â”œâ”€â”€ /cases
â”‚   â”œâ”€â”€ GET /cases
â”‚   â”œâ”€â”€ POST /cases
â”‚   â”œâ”€â”€ GET /cases/:id
â”‚   â”œâ”€â”€ PUT /cases/:id
â”‚   â”œâ”€â”€ GET /cases/:id/documents
â”‚   â”œâ”€â”€ GET /cases/:id/time-entries
â”‚   â””â”€â”€ GET /cases/:id/timeline
â”œâ”€â”€ /documents
â”‚   â”œâ”€â”€ POST /documents/upload
â”‚   â”œâ”€â”€ GET /documents/:id
â”‚   â”œâ”€â”€ GET /documents/:id/download
â”‚   â””â”€â”€ DELETE /documents/:id
â””â”€â”€ /reports
    â”œâ”€â”€ GET /reports/financial
    â”œâ”€â”€ GET /reports/productivity
    â””â”€â”€ GET /reports/case-analytics
```

### API Security Features
1. **JWT Authentication**: Stateless authentication with access and refresh tokens
2. **Rate Limiting**: Express-rate-limit for API protection
3. **Input Validation**: Joi/Yup validation for all request parameters
4. **SQL Injection Prevention**: Parameterized queries through Prisma ORM
5. **CORS Configuration**: Properly configured cross-origin resource sharing
6. **API Versioning**: Version-based routing for backward compatibility

## Security Architecture

### Authentication & Authorization
```typescript
// JWT token structure
interface JWTPayload {
  userId: string;
  email: string;
  role: UserRole;
  permissions: string[];
  iat: number;
  exp: number;
}

// Role-based permissions
const PERMISSIONS = {
  CASE_READ: 'case:read',
  CASE_WRITE: 'case:write',
  CLIENT_READ: 'client:read',
  CLIENT_WRITE: 'client:write',
  BILLING_READ: 'billing:read',
  BILLING_WRITE: 'billing:write',
  ADMIN_ACCESS: 'admin:access'
};

const ROLE_PERMISSIONS = {
  SUPER_ADMIN: Object.values(PERMISSIONS),
  PARTNER: [PERMISSIONS.CASE_READ, PERMISSIONS.CASE_WRITE, PERMISSIONS.CLIENT_READ, PERMISSIONS.CLIENT_WRITE, PERMISSIONS.BILLING_READ, PERMISSIONS.BILLING_WRITE],
  SENIOR_ASSOCIATE: [PERMISSIONS.CASE_READ, PERMISSIONS.CASE_WRITE, PERMISSIONS.CLIENT_READ],
  JUNIOR_ASSOCIATE: [PERMISSIONS.CASE_READ, PERMISSIONS.CLIENT_READ],
  CLIENT: [PERMISSIONS.CASE_READ] // Only own cases
};
```

### Data Encryption
1. **At Rest**: AES-256 encryption for sensitive database fields
2. **In Transit**: TLS 1.3 for all API communications
3. **Document Storage**: Encrypted file storage with access-controlled URLs
4. **Password Security**: bcrypt with salt rounds for password hashing

### Audit & Compliance
```typescript
// Audit log structure
interface AuditLog {
  id: string;
  userId: string;
  action: string;
  resource: string;
  resourceId: string;
  oldValues?: Record<string, any>;
  newValues?: Record<string, any>;
  ipAddress: string;
  userAgent: string;
  timestamp: Date;
}
```

## Frontend Architecture

### Component Structure
```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ ui/ (Reusable UI components)
â”‚   â”œâ”€â”€ forms/ (Form components)
â”‚   â”œâ”€â”€ layout/ (Layout components)
â”‚   â””â”€â”€ feature/ (Feature-specific components)
â”œâ”€â”€ pages/ (Route components)
â”œâ”€â”€ hooks/ (Custom React hooks)
â”œâ”€â”€ services/ (API service functions)
â”œâ”€â”€ store/ (Redux store configuration)
â”œâ”€â”€ utils/ (Utility functions)
â”œâ”€â”€ types/ (TypeScript type definitions)
â””â”€â”€ constants/ (Application constants)
```

### State Management Strategy
```typescript
// Redux store structure
interface RootState {
  auth: AuthState;
  cases: CasesState;
  clients: ClientsState;
  documents: DocumentsState;
  ui: UIState;
}

// React Query for server state
const useCases = () => {
  return useQuery({
    queryKey: ['cases'],
    queryFn: () => casesApi.getCases(),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};
```

### Performance Optimization
1. **Code Splitting**: Lazy loading of route components
2. **Bundle Optimization**: Webpack bundle analyzer for size optimization
3. **Image Optimization**: WebP format with fallbacks
4. **Caching Strategy**: Service worker for offline functionality
5. **Virtual Scrolling**: For large data lists

## Scalability Considerations

### Horizontal Scaling
1. **Stateless Services**: All services designed to be stateless
2. **Load Balancing**: Nginx load balancer with health checks
3. **Database Scaling**: Read replicas for query distribution
4. **Caching Layer**: Redis for session storage and caching
5. **CDN Integration**: CloudFront/CloudFlare for static asset delivery

### Performance Metrics
- **Response Time**: < 200ms for API calls, < 3s for page loads
- **Throughput**: Support 1000+ concurrent users
- **Database**: < 100ms query response time
- **Availability**: 99.9% uptime SLA

## Integration Architecture

### External System Integrations
```typescript
// Payment gateway integration
interface PaymentGateway {
  processPayment(amount: number, currency: string): Promise<PaymentResult>;
  verifyPayment(paymentId: string): Promise<PaymentVerification>;
}

// Email service integration
interface EmailService {
  sendEmail(to: string, template: string, data: any): Promise<void>;
  sendBulkEmail(recipients: string[], template: string, data: any): Promise<void>;
}

// Calendar integration
interface CalendarService {
  createEvent(event: CalendarEvent): Promise<string>;
  updateEvent(eventId: string, event: Partial<CalendarEvent>): Promise<void>;
  syncEvents(): Promise<CalendarEvent[]>;
}
```

### Integration Patterns
1. **API-First Approach**: All integrations through well-defined APIs
2. **Webhook Support**: Real-time notifications for external systems
3. **Retry Mechanisms**: Exponential backoff for failed requests
4. **Circuit Breakers**: Fail-fast pattern for external service failures

## Deployment Architecture

### Container Strategy
```dockerfile
# Multi-stage Docker build
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS runtime
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

### Environment Configuration
```yaml
# docker-compose.yml
version: '3.8'
services:
  web:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db
      - redis
  
  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=raghuu_legal
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
```

## Monitoring & Observability

### Logging Strategy
```typescript
// Structured logging with Winston
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});
```

### Health Checks
```typescript
// Health check endpoint
app.get('/health', async (req, res) => {
  const health = {
    uptime: process.uptime(),
    timestamp: Date.now(),
    status: 'OK',
    checks: {
      database: await checkDatabase(),
      redis: await checkRedis(),
      externalAPIs: await checkExternalAPIs()
    }
  };
  
  const status = health.checks.database && health.checks.redis ? 200 : 503;
  res.status(status).json(health);
});
```

This architecture provides a robust, scalable, and secure foundation for the RAGHUU CO Legal Practice Management System, ensuring high performance, maintainability, and compliance with Indian legal industry requirements.